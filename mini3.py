# -*- coding: utf-8 -*-
"""Mini3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uU0jqbeX_C10Af2vn0xE6KjiDAm0wlcR
"""
import torch
import streamlit as st
from dijkstar import Graph, find_path
from sentence_transformers import SentenceTransformer


flower_names = torch.load("flower_names.pt")

# Flower Hopper


class FlowerHopper:
  def __init__(self, flower_names):
    self.model = SentenceTransformer('paraphrase-MiniLM-L6-v2')
    self.flower_names_embeddings = torch.nn.functional.normalize(torch.tensor(self.model.encode(flower_names)))
    similarity_matrix = torch.matmul(self.flower_names_embeddings, torch.transpose(self.flower_names_embeddings, 0, 1))
    self.distance_matrix = 1 - similarity_matrix
    self.graph = self.init_graph()

  def get_closest_index(self, text):
     embedding = torch.tensor(self.model.encode([text]))
     similarities = torch.matmul(self.flower_names_embeddings, embedding.view(-1,1))
     _, indices = similarities.topk(1,dim=0)
     return indices[0].item()

  def init_graph(self):
    graph = Graph ()
    for i in range(100):
      for j in range(100):
        graph.add_edge(i, j, self.distance_matrix[i,j].item())
    return graph

  def get_shortest_path(self, flowerA, flowerB):
    i, j = self.get_closest_index(flowerA), self.get_closest_index(flowerB)
    self.graph.remove_edge(i, j)
    shortest_path = find_path(self.graph, i, j)
    self.graph.add_edge(i, j, self.distance_matrix[i,j].item())
    return shortest_path.nodes


def getIndex(input):
  for i in range(len(flower_names)):
    if flower_names[i].lower()==input.lower():
      return i
  return 0
  

def getFileName(name):
   return "100flowers/"+name+".jpeg"

def display(images):
  for i in range(0, len(images), 3):
        cols = st.columns(3)
        for j in range(3):
            if(i+j)>=len(images): 
               break
            with cols[j]:
                st.image(getFileName(flower_names[images[i+j]]), use_column_width=True, caption=flower_names[images[i+j]])
  
def main():
  st.title("Flower Hopper App")
  user_input1 = st.text_input("Flower A: ")
  user_input2 = st.text_input("Flower B: ")
  submit_button = st.button("Submit")
  if submit_button:
    nodes = FlowerHopper(flower_names).get_shortest_path(user_input1,user_input2)
    print(nodes)
    display(nodes)


main()
